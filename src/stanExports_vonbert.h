// Generated by rstantools.  Do not edit by hand.

/*
    fishgrowbot is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishgrowbot is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishgrowbot.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_vonbert_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_vonbert");
    reader.add_event(90, 88, "end", "model_vonbert");
    return reader;
}
#include <stan_meta_header.hpp>
class model_vonbert : public prob_grad {
private:
        int N;
        vector_d y;
        vector_d x;
        vector_d X;
        int N_1;
        std::vector<int> J;
        double linf_prior;
        double lmax;
public:
    model_vonbert(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_vonbert(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_vonbert_namespace::model_vonbert";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 6;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
            x = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(N));
            X = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                X(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "N_1", "int", context__.to_vec());
            N_1 = int(0);
            vals_i__ = context__.vals_i("N_1");
            pos__ = 0;
            N_1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_1", N_1, 1);
            current_statement_begin__ = 14;
            validate_non_negative_index("J", "N", N);
            context__.validate_dims("data initialization", "J", "int", context__.to_vec(N));
            J = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            size_t J_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < J_k_0_max__; ++k_0__) {
                J[k_0__] = vals_i__[pos__++];
            }
            size_t J_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < J_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "J[i_0__]", J[i_0__], 1);
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "linf_prior", "double", context__.to_vec());
            linf_prior = double(0);
            vals_r__ = context__.vals_r("linf_prior");
            pos__ = 0;
            linf_prior = vals_r__[pos__++];
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "lmax", "double", context__.to_vec());
            lmax = double(0);
            vals_r__ = context__.vals_r("lmax");
            pos__ = 0;
            lmax = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 22;
            num_params_r__ += 1;
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            validate_non_negative_index("sd_linf", "1", 1);
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            validate_non_negative_index("z_linf", "N_1", N_1);
            validate_non_negative_index("z_linf", "1", 1);
            num_params_r__ += (N_1 * 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_vonbert() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 22;
        if (!(context__.contains_r("t0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "t0", "double", context__.to_vec());
        double t0(0);
        t0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(t0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("linf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable linf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("linf");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "linf", "double", context__.to_vec());
        double linf(0);
        linf = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(linf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable linf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("sl")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sl missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sl");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sl", "double", context__.to_vec());
        double sl(0);
        sl = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sl);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sl: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("gp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gp");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gp", "double", context__.to_vec());
        double gp(0);
        gp = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(gp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("sd_linf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_linf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_linf");
        pos__ = 0U;
        validate_non_negative_index("sd_linf", "1", 1);
        context__.validate_dims("parameter initialization", "sd_linf", "vector_d", context__.to_vec(1));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sd_linf(1);
        size_t sd_linf_j_1_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < sd_linf_j_1_max__; ++j_1__) {
            sd_linf(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sd_linf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_linf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("z_linf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_linf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_linf");
        pos__ = 0U;
        validate_non_negative_index("z_linf", "N_1", N_1);
        validate_non_negative_index("z_linf", "1", 1);
        context__.validate_dims("parameter initialization", "z_linf", "vector_d", context__.to_vec(1,N_1));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > z_linf(1, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_1));
        size_t z_linf_j_1_max__ = N_1;
        size_t z_linf_k_0_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < z_linf_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_linf_k_0_max__; ++k_0__) {
                z_linf[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t z_linf_i_0_max__ = 1;
        for (size_t i_0__ = 0; i_0__ < z_linf_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(z_linf[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_linf: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 22;
            local_scalar_t__ t0;
            (void) t0;  // dummy to suppress unused var warning
            if (jacobian__)
                t0 = in__.scalar_constrain(lp__);
            else
                t0 = in__.scalar_constrain();
            current_statement_begin__ = 23;
            local_scalar_t__ linf;
            (void) linf;  // dummy to suppress unused var warning
            if (jacobian__)
                linf = in__.scalar_constrain(lp__);
            else
                linf = in__.scalar_constrain();
            current_statement_begin__ = 24;
            local_scalar_t__ sl;
            (void) sl;  // dummy to suppress unused var warning
            if (jacobian__)
                sl = in__.scalar_constrain(lp__);
            else
                sl = in__.scalar_constrain();
            current_statement_begin__ = 25;
            local_scalar_t__ gp;
            (void) gp;  // dummy to suppress unused var warning
            if (jacobian__)
                gp = in__.scalar_constrain(lp__);
            else
                gp = in__.scalar_constrain();
            current_statement_begin__ = 26;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 27;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sd_linf;
            (void) sd_linf;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_linf = in__.vector_lb_constrain(0, 1, lp__);
            else
                sd_linf = in__.vector_lb_constrain(0, 1);
            current_statement_begin__ = 28;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > z_linf;
            size_t z_linf_d_0_max__ = 1;
            z_linf.reserve(z_linf_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_linf_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z_linf.push_back(in__.vector_constrain(N_1, lp__));
                else
                    z_linf.push_back(in__.vector_constrain(N_1));
            }
            // transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("r_linf", "N_1", N_1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r_linf(N_1);
            stan::math::initialize(r_linf, DUMMY_VAR__);
            stan::math::fill(r_linf, DUMMY_VAR__);
            stan::math::assign(r_linf,multiply(get_base1(sd_linf, 1, "sd_linf", 1), get_base1(z_linf, 1, "z_linf", 1)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            size_t r_linf_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < r_linf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(r_linf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r_linf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r_linf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 35;
            validate_non_negative_index("nlp_t0", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nlp_t0(N);
            stan::math::initialize(nlp_t0, DUMMY_VAR__);
            stan::math::fill(nlp_t0, DUMMY_VAR__);
            stan::math::assign(nlp_t0,multiply(X, t0));
            current_statement_begin__ = 36;
            validate_non_negative_index("nlp_linf", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nlp_linf(N);
            stan::math::initialize(nlp_linf, DUMMY_VAR__);
            stan::math::fill(nlp_linf, DUMMY_VAR__);
            stan::math::assign(nlp_linf,multiply(X, linf));
            current_statement_begin__ = 37;
            validate_non_negative_index("nlp_sl", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nlp_sl(N);
            stan::math::initialize(nlp_sl, DUMMY_VAR__);
            stan::math::fill(nlp_sl, DUMMY_VAR__);
            stan::math::assign(nlp_sl,multiply(X, sl));
            current_statement_begin__ = 38;
            validate_non_negative_index("nlp_gp", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nlp_gp(N);
            stan::math::initialize(nlp_gp, DUMMY_VAR__);
            stan::math::fill(nlp_gp, DUMMY_VAR__);
            stan::math::assign(nlp_gp,multiply(X, gp));
            current_statement_begin__ = 39;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 40;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 41;
                stan::model::assign(nlp_linf, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (stan::model::rvalue(nlp_linf, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "nlp_linf") + get_base1(r_linf, get_base1(J, n, "J", 1), "r_linf", 1)), 
                            "assigning variable nlp_linf");
                current_statement_begin__ = 43;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (get_base1(nlp_linf, n, "nlp_linf", 1) * (1 - stan::math::exp((-(stan::math::exp(((get_base1(nlp_sl, n, "nlp_sl", 1) * stan::math::log(get_base1(nlp_linf, n, "nlp_linf", 1))) + get_base1(nlp_gp, n, "nlp_gp", 1)))) * (get_base1(x, n, "x", 1) - get_base1(nlp_t0, n, "nlp_t0", 1)))))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 46;
            lp_accum__.add(normal_log(t0, -(0.5), 1));
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log(linf, linf_prior, 5));
            current_statement_begin__ = 48;
            lp_accum__.add(normal_log(sl, -(2.3), 0.22));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log(gp, 3, 2));
            current_statement_begin__ = 50;
            lp_accum__.add((student_t_log(sigma, 3, 0, 10) - (1 * student_t_ccdf_log(0, 3, 0, 10))));
            current_statement_begin__ = 52;
            lp_accum__.add((student_t_log(sd_linf, 3, 0, 10) - (1 * student_t_ccdf_log(0, 3, 0, 10))));
            current_statement_begin__ = 54;
            lp_accum__.add(normal_log(get_base1(z_linf, 1, "z_linf", 1), 0, 1));
            current_statement_begin__ = 56;
            lp_accum__.add(normal_log(y, mu, sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("t0");
        names__.push_back("linf");
        names__.push_back("sl");
        names__.push_back("gp");
        names__.push_back("sigma");
        names__.push_back("sd_linf");
        names__.push_back("z_linf");
        names__.push_back("r_linf");
        names__.push_back("k");
        names__.push_back("k_j");
        names__.push_back("linf_j");
        names__.push_back("kmax");
        names__.push_back("y_rep");
        names__.push_back("y_m");
        names__.push_back("y_max");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_vonbert_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double t0 = in__.scalar_constrain();
        vars__.push_back(t0);
        double linf = in__.scalar_constrain();
        vars__.push_back(linf);
        double sl = in__.scalar_constrain();
        vars__.push_back(sl);
        double gp = in__.scalar_constrain();
        vars__.push_back(gp);
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> sd_linf = in__.vector_lb_constrain(0, 1);
        size_t sd_linf_j_1_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < sd_linf_j_1_max__; ++j_1__) {
            vars__.push_back(sd_linf(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > z_linf;
        size_t z_linf_d_0_max__ = 1;
        z_linf.reserve(z_linf_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_linf_d_0_max__; ++d_0__) {
            z_linf.push_back(in__.vector_constrain(N_1));
        }
        size_t z_linf_j_1_max__ = N_1;
        size_t z_linf_k_0_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < z_linf_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_linf_k_0_max__; ++k_0__) {
                vars__.push_back(z_linf[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("r_linf", "N_1", N_1);
            Eigen::Matrix<double, Eigen::Dynamic, 1> r_linf(N_1);
            stan::math::initialize(r_linf, DUMMY_VAR__);
            stan::math::fill(r_linf, DUMMY_VAR__);
            stan::math::assign(r_linf,multiply(get_base1(sd_linf, 1, "sd_linf", 1), get_base1(z_linf, 1, "z_linf", 1)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t r_linf_j_1_max__ = N_1;
                for (size_t j_1__ = 0; j_1__ < r_linf_j_1_max__; ++j_1__) {
                    vars__.push_back(r_linf(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 60;
            double k;
            (void) k;  // dummy to suppress unused var warning
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("k_j", "N_1", N_1);
            Eigen::Matrix<double, Eigen::Dynamic, 1> k_j(N_1);
            stan::math::initialize(k_j, DUMMY_VAR__);
            stan::math::fill(k_j, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("linf_j", "N_1", N_1);
            Eigen::Matrix<double, Eigen::Dynamic, 1> linf_j(N_1);
            stan::math::initialize(linf_j, DUMMY_VAR__);
            stan::math::fill(linf_j, DUMMY_VAR__);
            current_statement_begin__ = 64;
            double kmax;
            (void) kmax;  // dummy to suppress unused var warning
            stan::math::initialize(kmax, DUMMY_VAR__);
            stan::math::fill(kmax, DUMMY_VAR__);
            current_statement_begin__ = 66;
            validate_non_negative_index("y_rep", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_rep(N);
            stan::math::initialize(y_rep, DUMMY_VAR__);
            stan::math::fill(y_rep, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("y_m", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_m(N);
            stan::math::initialize(y_m, DUMMY_VAR__);
            stan::math::fill(y_m, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("y_max", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_max(N);
            stan::math::initialize(y_max, DUMMY_VAR__);
            stan::math::fill(y_max, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 71;
            stan::math::assign(k, stan::math::exp(((sl * stan::math::log(linf)) + gp)));
            current_statement_begin__ = 72;
            stan::math::assign(kmax, stan::math::exp((gp + (sl * stan::math::log(lmax)))));
            current_statement_begin__ = 75;
            for (int n = 1; n <= N_1; ++n) {
                current_statement_begin__ = 76;
                stan::model::assign(linf_j, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (linf + get_base1(r_linf, n, "r_linf", 1)), 
                            "assigning variable linf_j");
                current_statement_begin__ = 77;
                stan::model::assign(k_j, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            stan::math::exp(((sl * stan::math::log(get_base1(linf_j, n, "linf_j", 1))) + gp)), 
                            "assigning variable k_j");
            }
            current_statement_begin__ = 82;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 83;
                stan::model::assign(y_rep, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (get_base1(linf_j, get_base1(J, n, "J", 1), "linf_j", 1) * (1 - stan::math::exp((-(get_base1(k_j, get_base1(J, n, "J", 1), "k_j", 1)) * (get_base1(x, n, "x", 1) - t0))))), 
                            "assigning variable y_rep");
                current_statement_begin__ = 84;
                stan::model::assign(y_m, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (linf * (1 - stan::math::exp((-(k) * (get_base1(x, n, "x", 1) - t0))))), 
                            "assigning variable y_m");
                current_statement_begin__ = 85;
                stan::model::assign(y_max, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (lmax * (1 - stan::math::exp((-(kmax) * (get_base1(x, n, "x", 1) - t0))))), 
                            "assigning variable y_max");
            }
            // validate, write generated quantities
            current_statement_begin__ = 60;
            vars__.push_back(k);
            current_statement_begin__ = 61;
            size_t k_j_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < k_j_j_1_max__; ++j_1__) {
                vars__.push_back(k_j(j_1__));
            }
            current_statement_begin__ = 62;
            size_t linf_j_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < linf_j_j_1_max__; ++j_1__) {
                vars__.push_back(linf_j(j_1__));
            }
            current_statement_begin__ = 64;
            vars__.push_back(kmax);
            current_statement_begin__ = 66;
            size_t y_rep_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_rep_j_1_max__; ++j_1__) {
                vars__.push_back(y_rep(j_1__));
            }
            current_statement_begin__ = 67;
            size_t y_m_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_m_j_1_max__; ++j_1__) {
                vars__.push_back(y_m(j_1__));
            }
            current_statement_begin__ = 68;
            size_t y_max_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_max_j_1_max__; ++j_1__) {
                vars__.push_back(y_max(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_vonbert";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t sd_linf_j_1_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < sd_linf_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_linf" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_linf_j_1_max__ = N_1;
        size_t z_linf_k_0_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < z_linf_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_linf_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_linf" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t r_linf_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < r_linf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_linf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        size_t k_j_j_1_max__ = N_1;
        for (size_t j_1__ = 0; j_1__ < k_j_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k_j" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t linf_j_j_1_max__ = N_1;
        for (size_t j_1__ = 0; j_1__ < linf_j_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "linf_j" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kmax";
        param_names__.push_back(param_name_stream__.str());
        size_t y_rep_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < y_rep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_m_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < y_m_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_m" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_max_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < y_max_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_max" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t sd_linf_j_1_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < sd_linf_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_linf" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_linf_j_1_max__ = N_1;
        size_t z_linf_k_0_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < z_linf_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_linf_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_linf" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t r_linf_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < r_linf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_linf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        size_t k_j_j_1_max__ = N_1;
        for (size_t j_1__ = 0; j_1__ < k_j_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k_j" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t linf_j_j_1_max__ = N_1;
        for (size_t j_1__ = 0; j_1__ < linf_j_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "linf_j" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "kmax";
        param_names__.push_back(param_name_stream__.str());
        size_t y_rep_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < y_rep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_m_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < y_m_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_m" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_max_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < y_max_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_max" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_vonbert_namespace::model_vonbert stan_model;
#endif
