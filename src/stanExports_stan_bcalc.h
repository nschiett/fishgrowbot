// Generated by rstantools.  Do not edit by hand.

/*
    fishgrowbot is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishgrowbot is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishgrowbot.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_stan_bcalc_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_stan_bcalc");
    reader.add_event(73, 71, "end", "model_stan_bcalc");
    return reader;
}
#include <stan_meta_header.hpp>
class model_stan_bcalc : public prob_grad {
private:
        int N;
        int Ni;
        int N_mis;
        vector_d rcap;
        vector_d lcap;
        double l0p;
        std::vector<int> id;
        std::vector<int> known;
        std::vector<int> missing;
        std::vector<int> known2;
        std::vector<int> missing2;
        vector_d r;
        vector_d r0p;
public:
    model_stan_bcalc(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_stan_bcalc(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_stan_bcalc_namespace::model_stan_bcalc";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "Ni", "int", context__.to_vec());
            Ni = int(0);
            vals_i__ = context__.vals_i("Ni");
            pos__ = 0;
            Ni = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N_mis", "int", context__.to_vec());
            N_mis = int(0);
            vals_i__ = context__.vals_i("N_mis");
            pos__ = 0;
            N_mis = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("rcap", "Ni", Ni);
            context__.validate_dims("data initialization", "rcap", "vector_d", context__.to_vec(Ni));
            rcap = Eigen::Matrix<double, Eigen::Dynamic, 1>(Ni);
            vals_r__ = context__.vals_r("rcap");
            pos__ = 0;
            size_t rcap_j_1_max__ = Ni;
            for (size_t j_1__ = 0; j_1__ < rcap_j_1_max__; ++j_1__) {
                rcap(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("lcap", "Ni", Ni);
            context__.validate_dims("data initialization", "lcap", "vector_d", context__.to_vec(Ni));
            lcap = Eigen::Matrix<double, Eigen::Dynamic, 1>(Ni);
            vals_r__ = context__.vals_r("lcap");
            pos__ = 0;
            size_t lcap_j_1_max__ = Ni;
            for (size_t j_1__ = 0; j_1__ < lcap_j_1_max__; ++j_1__) {
                lcap(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "l0p", "double", context__.to_vec());
            l0p = double(0);
            vals_r__ = context__.vals_r("l0p");
            pos__ = 0;
            l0p = vals_r__[pos__++];
            current_statement_begin__ = 8;
            validate_non_negative_index("id", "N", N);
            context__.validate_dims("data initialization", "id", "int", context__.to_vec(N));
            id = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("id");
            pos__ = 0;
            size_t id_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < id_k_0_max__; ++k_0__) {
                id[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("known", "(Ni - N_mis)", (Ni - N_mis));
            context__.validate_dims("data initialization", "known", "int", context__.to_vec((Ni - N_mis)));
            known = std::vector<int>((Ni - N_mis), int(0));
            vals_i__ = context__.vals_i("known");
            pos__ = 0;
            size_t known_k_0_max__ = (Ni - N_mis);
            for (size_t k_0__ = 0; k_0__ < known_k_0_max__; ++k_0__) {
                known[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("missing", "N_mis", N_mis);
            context__.validate_dims("data initialization", "missing", "int", context__.to_vec(N_mis));
            missing = std::vector<int>(N_mis, int(0));
            vals_i__ = context__.vals_i("missing");
            pos__ = 0;
            size_t missing_k_0_max__ = N_mis;
            for (size_t k_0__ = 0; k_0__ < missing_k_0_max__; ++k_0__) {
                missing[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("known2", "(N - N_mis)", (N - N_mis));
            context__.validate_dims("data initialization", "known2", "int", context__.to_vec((N - N_mis)));
            known2 = std::vector<int>((N - N_mis), int(0));
            vals_i__ = context__.vals_i("known2");
            pos__ = 0;
            size_t known2_k_0_max__ = (N - N_mis);
            for (size_t k_0__ = 0; k_0__ < known2_k_0_max__; ++k_0__) {
                known2[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("missing2", "N_mis", N_mis);
            context__.validate_dims("data initialization", "missing2", "int", context__.to_vec(N_mis));
            missing2 = std::vector<int>(N_mis, int(0));
            vals_i__ = context__.vals_i("missing2");
            pos__ = 0;
            size_t missing2_k_0_max__ = N_mis;
            for (size_t k_0__ = 0; k_0__ < missing2_k_0_max__; ++k_0__) {
                missing2[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("r", "(N - N_mis)", (N - N_mis));
            context__.validate_dims("data initialization", "r", "vector_d", context__.to_vec((N - N_mis)));
            r = Eigen::Matrix<double, Eigen::Dynamic, 1>((N - N_mis));
            vals_r__ = context__.vals_r("r");
            pos__ = 0;
            size_t r_j_1_max__ = (N - N_mis);
            for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                r(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("r0p", "(Ni - N_mis)", (Ni - N_mis));
            context__.validate_dims("data initialization", "r0p", "vector_d", context__.to_vec((Ni - N_mis)));
            r0p = Eigen::Matrix<double, Eigen::Dynamic, 1>((Ni - N_mis));
            vals_r__ = context__.vals_r("r0p");
            pos__ = 0;
            size_t r0p_j_1_max__ = (Ni - N_mis);
            for (size_t j_1__ = 0; j_1__ < r0p_j_1_max__; ++j_1__) {
                r0p(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 21;
            num_params_r__ += 1;
            current_statement_begin__ = 22;
            num_params_r__ += 1;
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            validate_non_negative_index("r0p_mis", "N_mis", N_mis);
            num_params_r__ += N_mis;
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_stan_bcalc() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 21;
        if (!(context__.contains_r("b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "b", "double", context__.to_vec());
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "c", "double", context__.to_vec());
        double c(0);
        c = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("r0p_mis")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r0p_mis missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r0p_mis");
        pos__ = 0U;
        validate_non_negative_index("r0p_mis", "N_mis", N_mis);
        context__.validate_dims("parameter initialization", "r0p_mis", "vector_d", context__.to_vec(N_mis));
        Eigen::Matrix<double, Eigen::Dynamic, 1> r0p_mis(N_mis);
        size_t r0p_mis_j_1_max__ = N_mis;
        for (size_t j_1__ = 0; j_1__ < r0p_mis_j_1_max__; ++j_1__) {
            r0p_mis(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 0.02, r0p_mis);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r0p_mis: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("r0p_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r0p_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r0p_mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "r0p_mu", "double", context__.to_vec());
        double r0p_mu(0);
        r0p_mu = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 0.02, r0p_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r0p_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("r0p_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r0p_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r0p_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "r0p_sd", "double", context__.to_vec());
        double r0p_sd(0);
        r0p_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, r0p_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r0p_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 21;
            local_scalar_t__ b;
            (void) b;  // dummy to suppress unused var warning
            if (jacobian__)
                b = in__.scalar_lb_constrain(0, lp__);
            else
                b = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 22;
            local_scalar_t__ c;
            (void) c;  // dummy to suppress unused var warning
            if (jacobian__)
                c = in__.scalar_lb_constrain(0, lp__);
            else
                c = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 23;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 24;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r0p_mis;
            (void) r0p_mis;  // dummy to suppress unused var warning
            if (jacobian__)
                r0p_mis = in__.vector_lub_constrain(0, 0.02, N_mis, lp__);
            else
                r0p_mis = in__.vector_lub_constrain(0, 0.02, N_mis);
            current_statement_begin__ = 25;
            local_scalar_t__ r0p_mu;
            (void) r0p_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                r0p_mu = in__.scalar_lub_constrain(0, 0.02, lp__);
            else
                r0p_mu = in__.scalar_lub_constrain(0, 0.02);
            current_statement_begin__ = 26;
            local_scalar_t__ r0p_sd;
            (void) r0p_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                r0p_sd = in__.scalar_lb_constrain(0, lp__);
            else
                r0p_sd = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("r0p_imp", "Ni", Ni);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r0p_imp(Ni);
            stan::math::initialize(r0p_imp, DUMMY_VAR__);
            stan::math::fill(r0p_imp, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("r_imp", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r_imp(N);
            stan::math::initialize(r_imp, DUMMY_VAR__);
            stan::math::fill(r_imp, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 32;
            stan::model::assign(r0p_imp, 
                        stan::model::cons_list(stan::model::index_multi(known), stan::model::nil_index_list()), 
                        r0p, 
                        "assigning variable r0p_imp");
            current_statement_begin__ = 33;
            stan::model::assign(r0p_imp, 
                        stan::model::cons_list(stan::model::index_multi(missing), stan::model::nil_index_list()), 
                        r0p_mis, 
                        "assigning variable r0p_imp");
            current_statement_begin__ = 34;
            stan::model::assign(r_imp, 
                        stan::model::cons_list(stan::model::index_multi(known2), stan::model::nil_index_list()), 
                        r, 
                        "assigning variable r_imp");
            current_statement_begin__ = 35;
            stan::model::assign(r_imp, 
                        stan::model::cons_list(stan::model::index_multi(missing2), stan::model::nil_index_list()), 
                        r0p_mis, 
                        "assigning variable r_imp");
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 30;
            size_t r0p_imp_j_1_max__ = Ni;
            for (size_t j_1__ = 0; j_1__ < r0p_imp_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(r0p_imp(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r0p_imp" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r0p_imp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 31;
            size_t r_imp_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < r_imp_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(r_imp(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r_imp" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r_imp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 39;
            validate_non_negative_index("mu", "Ni", Ni);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(Ni);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 41;
            lp_accum__.add(normal_log<propto__>(r0p, r0p_mu, r0p_sd));
            current_statement_begin__ = 42;
            lp_accum__.add(normal_log<propto__>(r0p_mis, r0p_mu, r0p_sd));
            current_statement_begin__ = 44;
            lp_accum__.add(normal_log<propto__>(r0p_mu, 0.005, 0.00025));
            current_statement_begin__ = 47;
            lp_accum__.add(cauchy_log(sigma, 0, 5));
            current_statement_begin__ = 48;
            lp_accum__.add(cauchy_log(r0p_sd, 0, 5));
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log<propto__>(b, 200, 50));
            current_statement_begin__ = 51;
            lp_accum__.add(normal_log<propto__>(c, 1, 0.2));
            current_statement_begin__ = 53;
            for (int n = 1; n <= Ni; ++n) {
                current_statement_begin__ = 54;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            ((l0p - (b * pow(get_base1(r0p_imp, n, "r0p_imp", 1), c))) + (b * pow(get_base1(rcap, n, "rcap", 1), c))), 
                            "assigning variable mu");
                current_statement_begin__ = 55;
                lp_accum__.add(normal_log<propto__>(get_base1(lcap, n, "lcap", 1), get_base1(mu, n, "mu", 1), sigma));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b");
        names__.push_back("c");
        names__.push_back("sigma");
        names__.push_back("r0p_mis");
        names__.push_back("r0p_mu");
        names__.push_back("r0p_sd");
        names__.push_back("r0p_imp");
        names__.push_back("r_imp");
        names__.push_back("a");
        names__.push_back("l");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_mis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ni);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ni);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_stan_bcalc_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double b = in__.scalar_lb_constrain(0);
        vars__.push_back(b);
        double c = in__.scalar_lb_constrain(0);
        vars__.push_back(c);
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> r0p_mis = in__.vector_lub_constrain(0, 0.02, N_mis);
        size_t r0p_mis_j_1_max__ = N_mis;
        for (size_t j_1__ = 0; j_1__ < r0p_mis_j_1_max__; ++j_1__) {
            vars__.push_back(r0p_mis(j_1__));
        }
        double r0p_mu = in__.scalar_lub_constrain(0, 0.02);
        vars__.push_back(r0p_mu);
        double r0p_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(r0p_sd);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("r0p_imp", "Ni", Ni);
            Eigen::Matrix<double, Eigen::Dynamic, 1> r0p_imp(Ni);
            stan::math::initialize(r0p_imp, DUMMY_VAR__);
            stan::math::fill(r0p_imp, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("r_imp", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> r_imp(N);
            stan::math::initialize(r_imp, DUMMY_VAR__);
            stan::math::fill(r_imp, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 32;
            stan::model::assign(r0p_imp, 
                        stan::model::cons_list(stan::model::index_multi(known), stan::model::nil_index_list()), 
                        r0p, 
                        "assigning variable r0p_imp");
            current_statement_begin__ = 33;
            stan::model::assign(r0p_imp, 
                        stan::model::cons_list(stan::model::index_multi(missing), stan::model::nil_index_list()), 
                        r0p_mis, 
                        "assigning variable r0p_imp");
            current_statement_begin__ = 34;
            stan::model::assign(r_imp, 
                        stan::model::cons_list(stan::model::index_multi(known2), stan::model::nil_index_list()), 
                        r, 
                        "assigning variable r_imp");
            current_statement_begin__ = 35;
            stan::model::assign(r_imp, 
                        stan::model::cons_list(stan::model::index_multi(missing2), stan::model::nil_index_list()), 
                        r0p_mis, 
                        "assigning variable r_imp");
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t r0p_imp_j_1_max__ = Ni;
                for (size_t j_1__ = 0; j_1__ < r0p_imp_j_1_max__; ++j_1__) {
                    vars__.push_back(r0p_imp(j_1__));
                }
                size_t r_imp_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < r_imp_j_1_max__; ++j_1__) {
                    vars__.push_back(r_imp(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 60;
            validate_non_negative_index("a", "Ni", Ni);
            Eigen::Matrix<double, Eigen::Dynamic, 1> a(Ni);
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("l", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> l(N);
            stan::math::initialize(l, DUMMY_VAR__);
            stan::math::fill(l, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 63;
            for (int i = 1; i <= Ni; ++i) {
                current_statement_begin__ = 64;
                stan::model::assign(a, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (l0p - (b * pow(get_base1(r0p_imp, i, "r0p_imp", 1), c))), 
                            "assigning variable a");
            }
            current_statement_begin__ = 67;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 68;
                stan::model::assign(l, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (get_base1(a, get_base1(id, n, "id", 1), "a", 1) + stan::math::exp((stan::math::log((l0p - get_base1(a, get_base1(id, n, "id", 1), "a", 1))) + (((stan::math::log((get_base1(lcap, get_base1(id, n, "id", 1), "lcap", 1) - get_base1(a, get_base1(id, n, "id", 1), "a", 1))) - stan::math::log((l0p - get_base1(a, get_base1(id, n, "id", 1), "a", 1)))) * (stan::math::log(get_base1(r_imp, n, "r_imp", 1)) - stan::math::log(get_base1(r0p_imp, get_base1(id, n, "id", 1), "r0p_imp", 1)))) / (stan::math::log(get_base1(rcap, get_base1(id, n, "id", 1), "rcap", 1)) - stan::math::log(get_base1(r0p_imp, get_base1(id, n, "id", 1), "r0p_imp", 1))))))), 
                            "assigning variable l");
            }
            // validate, write generated quantities
            current_statement_begin__ = 60;
            size_t a_j_1_max__ = Ni;
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                vars__.push_back(a(j_1__));
            }
            current_statement_begin__ = 61;
            size_t l_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < l_j_1_max__; ++j_1__) {
                vars__.push_back(l(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_stan_bcalc";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t r0p_mis_j_1_max__ = N_mis;
        for (size_t j_1__ = 0; j_1__ < r0p_mis_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r0p_mis" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0p_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0p_sd";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t r0p_imp_j_1_max__ = Ni;
            for (size_t j_1__ = 0; j_1__ < r0p_imp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r0p_imp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r_imp_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < r_imp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_imp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t a_j_1_max__ = Ni;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t l_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < l_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t r0p_mis_j_1_max__ = N_mis;
        for (size_t j_1__ = 0; j_1__ < r0p_mis_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r0p_mis" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0p_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0p_sd";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t r0p_imp_j_1_max__ = Ni;
            for (size_t j_1__ = 0; j_1__ < r0p_imp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r0p_imp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r_imp_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < r_imp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_imp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t a_j_1_max__ = Ni;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t l_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < l_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_stan_bcalc_namespace::model_stan_bcalc stan_model;
#endif
